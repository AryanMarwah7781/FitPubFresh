apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: ai-fitness-dev
  region: us-east-1
  version: "1.28"
  tags:
    Environment: development
    Project: ai-fitness
    Owner: learning-project
    CostCenter: development
    AutoShutdown: "true"

# Cost optimization: Use single AZ for development
availabilityZones: ["us-east-1a", "us-east-1b"]

# VPC Configuration for cost optimization
vpc:
  enableDnsHostnames: true
  enableDnsSupport: true
  tags:
    Name: ai-fitness-dev-vpc
    Environment: development

# IAM configuration
iam:
  withOIDC: true
  serviceAccounts:
  - metadata:
      name: cluster-autoscaler
      namespace: kube-system
    wellKnownPolicies:
      autoScaler: true
  - metadata:
      name: aws-load-balancer-controller
      namespace: kube-system
    wellKnownPolicies:
      awsLoadBalancerController: true

# Node Groups Configuration
nodeGroups:
  - name: ai-fitness-workers
    instanceType: t3.medium
    
    # Cost optimization settings
    amiFamily: AmazonLinux2
    capacityType: spot # Use spot instances for cost savings
    spotInstanceTypes: ["t3.medium", "t3a.medium"] # Mix of instance types for spot
    
    # Scaling configuration
    desiredCapacity: 2
    minSize: 1
    maxSize: 4
    
    # Volume configuration (cost optimized)
    volumeSize: 20 # Smaller volume for cost savings
    volumeType: gp3
    volumeEncrypted: true
    
    # Security and networking
    privateNetworking: true
    
    # Kubernetes labels
    labels:
      role: worker
      environment: development
      instance-type: t3.medium
    
    # Tagging for cost tracking
    tags:
      Name: ai-fitness-dev-worker
      Environment: development
      NodeGroup: ai-fitness-workers
      Project: ai-fitness
      CostCenter: development
      AutoShutdown: "true"
    
    # SSH access (optional - remove if not needed)
    ssh:
      allow: true
      publicKeyName: # Add your key pair name here if you have one
    
    # IAM policies for nodes
    iam:
      attachPolicyARNs:
      - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
      - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
    
    # Instance metadata options
    instanceMetadataOptions:
      httpTokens: required
      httpPutResponseHopLimit: 1

# Add-ons for monitoring and management
addons:
- name: vpc-cni
  version: latest
  resolveConflicts: overwrite
- name: coredns
  version: latest
  resolveConflicts: overwrite
- name: kube-proxy
  version: latest
  resolveConflicts: overwrite
- name: aws-ebs-csi-driver
  version: latest
  resolveConflicts: overwrite
  wellKnownPolicies:
    ebsCSIController: true

# CloudWatch logging (basic monitoring)
cloudWatch:
  clusterLogging:
    enable: ["audit", "authenticator", "controllerManager"]
    logRetentionInDays: 7 # Short retention for cost savings

# Managed node groups for auto-scaling
managedNodeGroups:
  - name: managed-workers
    instanceTypes: ["t3.medium"]
    capacityType: spot
    
    # Scaling
    minSize: 1
    maxSize: 3
    desiredCapacity: 1
    
    # OS and AMI
    amiFamily: AmazonLinux2
    
    # Volume
    volumeSize: 20
    volumeType: gp3
    
    # Networking
    privateNetworking: true
    
    # Labels and tags
    labels:
      role: managed-worker
      environment: development
    
    tags:
      Name: ai-fitness-dev-managed
      Environment: development
      Project: ai-fitness
      CostCenter: development
      AutoShutdown: "true"
    
    # Update configuration
    updateConfig:
      maxUnavailablePercentage: 25
    
    # Launch template
    launchTemplate:
      # Cost optimization
      instanceMetadataOptions:
        httpTokens: required
        httpPutResponseHopLimit: 1
      
      # User data for cost monitoring
      userData: |
        #!/bin/bash
        /etc/eks/bootstrap.sh ai-fitness-dev
        
        # Install CloudWatch agent
        wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
        rpm -U ./amazon-cloudwatch-agent.rpm
        
        # Basic monitoring setup
        cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << EOF
        {
          "metrics": {
            "namespace": "EKS/ai-fitness-dev",
            "metrics_collected": {
              "cpu": {
                "measurement": ["cpu_usage_idle", "cpu_usage_iowait", "cpu_usage_user", "cpu_usage_system"],
                "metrics_collection_interval": 300
              },
              "disk": {
                "measurement": ["used_percent"],
                "metrics_collection_interval": 300,
                "resources": ["*"]
              },
              "mem": {
                "measurement": ["mem_used_percent"],
                "metrics_collection_interval": 300
              }
            }
          }
        }
        EOF
        
        /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
          -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s

# Git ops configuration
gitops:
  flux:
    gitProvider: github
    flags:
      owner: AryanMarwah7781
      repository: FitPubFresh
      private: false
      branch: main
      namespace: flux-system
      path: clusters/ai-fitness-dev